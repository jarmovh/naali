namespace Console
{
/**

\page DebugConsole Debug console

	The debug console can be used to output messages or to call C++
    functions from the Console for debugging and development purposes.
    By default, log messages are outputted to the console.
    
    Support for two kinds of consoles are provided, a native console
    (command line / terminal) and an Ogre overlay console, which is shown
    in the main render window when the key above tab is pressed.

    C++ functions can be bound to console commands by using the console
    command service (see ConsoleCommandServiceInterface for details).

    By default a generic console is used, which accepts input and 
    output and directs them to all other enabled consoles.
    
\section commands_console Console commands
	
	Users can enter commands into the debug console which can be bound
	to C++ callbacks. Commands support arbitrary number of parameters
	in the form:
	\verbatim
command(param1, param2, param3)
	\endverbatim
	The parameters are passed into the callback function as a string
	vector.
	
\subsection command_bind_console Binding commands

	Several helper classes and functions are provided. Below is an
	example code snippet of binding a C++ member function into a console
	command:
	\verbatim
AutoRegisterConsoleCommand(Console::CreateCommand(
            "RequestAsset", "Request asset from server. Usage: RequestAsset(uuid,assettype)", 
            Console::Bind(this, &AssetModule::ConsoleRequestAsset)));
	\endverbatim
	Foundation::ModuleInterface::AutoRegisterConsoleCommand() -function
	is used here to automatically register and unregister the command
	when the module gets initialized / uninitialized. This is the
	preferred way of binding C++ functions to console commands and
	generally causes least amount of problems.
	
	Static functions can also be bound, see CreateCommand()-function for more information.
	
	One can also quary the ConsoleCommandService and register / unregister
	commands manually, see \ref using_services and ConsoleCommandServiceInterface.
	
	The C++ callback is automatically called by the CommandManager. For
	threadsafe calling, see \ref threading_console.
	
\subsection threading_console Threadsafe execution of commands
	
	This requires a bit more work. First of all when binding a console command,
	the console command must be created as "delayed", see Console::CreateCommand().
	
	Then in your thread's update loop, you must call Console::ConsoleCommandServiceInterface::Poll().
	
\subsection command_callback_console The C++ callback
	Below is the signature of the C++ callback function:
	\verbatim
CommandResult (*Callback)(const Core::StringVector&);
	\endverbatim
	
	An example:
	\verbatim
Console::CommandResult CommandManager::ConsoleTest(const Core::StringVector &params)
{
	if (params.empty() == false)
	    console_->Print(params[0]);

    return Console::ResultSuccess();
}
	\endverbatim
	
	The function prints out the first parameter supplied to the command, if
	any were, and prints it out to the console and then returns a success.
	
	The function must return a CommandResult to indicate
	whether the command was executed succesfully or not, and
	to report any potential errors. ResultSuccess() and ResultFailure() as well
	as others are provided as convenient shortcuts.
	
	For threadsafe calling of the callback function, see \ref threading_console.
	
*/
}
