# -*- python -*-
# ex: set syntax=python:

# This is a sample buildmaster config file. It must be installed as
# 'master.cfg' in your buildmaster's base directory (although the filename
# can be changed with the --basedir option to 'mktap buildbot master').

# It has one job: define a dictionary named BuildmasterConfig. This
# dictionary has a variety of keys to control different aspects of the
# buildmaster. They are documented in docs/config.xhtml .


# This is the dictionary that the buildmaster pays attention to. We also use
# a shorter alias to save typing.
c = BuildmasterConfig = {}

def readpass(fn):
    return open("passwords/" + fn).read().strip()

####### BUILDSLAVES

# the 'slaves' list defines the set of allowable buildslaves. Each element is
# a BuildSlave object, which is created with bot-name, bot-password.  These
# correspond to values given to the buildslave's mktap invocation.
from buildbot.buildslave import BuildSlave

c['slaves'] = [BuildSlave("ubuntu", readpass("ubuntu-slave"), max_builds=1),
               BuildSlave("win", readpass("win-slave"), max_builds=1),
               BuildSlave("ubuntu-pkg", readpass("ubuntu-pkg"), max_builds=1)]

# to limit to two concurrent builds on a slave, use
#  c['slaves'] = [BuildSlave("bot1name", "bot1passwd", max_builds=2)]


# 'slavePortnum' defines the TCP port to listen on. This must match the value
# configured into the buildslaves (with their --master option)

c['slavePortnum'] = 9989

####### CHANGESOURCES

# the 'change_source' setting tells the buildmaster how it should find out
# about source code changes. Any class which implements IChangeSource can be
# put here: there are several in buildbot/changes/*.py to choose from.

from buildbot.changes.pb import PBChangeSource
c['change_source'] = PBChangeSource()

# For example, if you had CVSToys installed on your repository, and your
# CVSROOT/freshcfg file had an entry like this:
#pb = ConfigurationSet([
#    (None, None, None, PBService(userpass=('foo', 'bar'), port=4519)),
#    ])

# then you could use the following buildmaster Change Source to subscribe to
# the FreshCVS daemon and be notified on every commit:
#
#from buildbot.changes.freshcvs import FreshCVSSource
#fc_source = FreshCVSSource("cvs.example.com", 4519, "foo", "bar")
#c['change_source'] = fc_source

# or, use a PBChangeSource, and then have your repository's commit script run
# 'buildbot sendchange', or use contrib/svn_buildbot.py, or
# contrib/arch_buildbot.py :
#
#from buildbot.changes.pb import PBChangeSource
#c['change_source'] = PBChangeSource()

# If you wat to use SVNPoller, it might look something like
#  # Where to get source code changes
# from buildbot.changes.svnpoller import SVNPoller
# source_code_svn_url='https://svn.myproject.org/bluejay/trunk'
# svn_poller = SVNPoller(
#                    svnurl=source_code_svn_url,
#                    pollinterval=60*60, # seconds
#                    histmax=10,
#                    svnbin='/usr/bin/svn',
## )
# c['sources'] = [ svn_poller ]

####### SCHEDULERS
 
## configure the Schedulers

from buildbot.scheduler import Scheduler
c['schedulers'] = []
c['schedulers'].append(Scheduler(name="develop", branch="develop",
                                 treeStableTimer=2*60,
                                 builderNames=["naali-ubuntu-incremental"]))
c['schedulers'].append(Scheduler(name="tundra", branch="tundra",
                                 treeStableTimer=2*60,
                                 builderNames=["tundra-ubuntu-incremental"]))
c['schedulers'].append(Scheduler(name="tundra-deb", branch="tundra",
                                 treeStableTimer=2*60,
                                 builderNames=["tundra-deb"]))
c['schedulers'].append(Scheduler(name="develop-deb", branch="develop",
                                 treeStableTimer=2*60,
                                 builderNames=["develop-deb"]))

####### BUILDERS

# the 'builders' list defines the Builders. Each one is configured with a
# dictionary, using the following keys:
#  name (required): the name used to describe this builder
#  slavename (required): which slave to use (must appear in c['bots'])
#  builddir (required): which subdirectory to run the builder in
#  factory (required): a BuildFactory to define how the build is run
#  periodicBuildTime (optional): if set, force a build every N seconds

# buildbot/process/factory.py provides several BuildFactory classes you can
# start with, which implement build processes for common targets (GNU
# autoconf projects, CPAN perl modules, etc). The factory.BuildFactory is the
# base class, and is configured with a series of BuildSteps. When the build
# is run, the appropriate buildslave is told to execute each Step in turn.

# the first BuildStep is typically responsible for obtaining a copy of the
# sources. There are source-obtaining Steps in buildbot/steps/source.py for
# CVS, SVN, and others.

from buildbot.process import factory
from buildbot.steps.source import Git
from buildbot.steps.shell import Configure, Compile, Test, ShellCommand
from buildbot.steps.python_twisted import Trial
from buildbot.status.builder import SUCCESS, WARNINGS, FAILURE, STDOUT, STDERR
from twisted.python import log
import os

class NaaliTest(Test):
    warningPattern = r'(?i)^Traceback .*:|.*\bexception\b'

    testscript="""
    echo '[apitest.testrunner.TestCreateDestroy]' > bin/pymodules/tests.ini
    export DISPLAY=:0
    cd bin
    ulimit -c unlimited
    ulimit -t 120 # seconds of cpu time
    rm -f core
    ./viewer
    s=$?
    if test -f core; then
      nn=core.$(date --iso=seconds)
      mv core $nn
      gdb -q -batch -ex backtrace viewer $nn 
      gzip $nn &
    fi
    exit $s
    """

    def __init__(self, *args, **kwargs):
        kwargs["command"] = ["bash", "-c", self.testscript]
        Test.__init__(self, *args, **kwargs)


    def evaluateCommand(self, cmd):
        rc = Test.evaluateCommand(self, cmd)
        test_stdio = self.getLog('stdio').getText()
        if 'test state: failure' in test_stdio.lower():
            return FAILURE
        else:
            return rc

class TundraTest(Test):
    warningPattern = r'(?i)^Traceback .*:|.*\bexception\b'

    testscript="""
    export DISPLAY=:0
    ulimit -t 120 # seconds of cpu time
    bash tools/js-viewer-server-test.bash bin/scenes/Avatar/avatar.txml
    s=$?
    if test -f core; then
      nn=core.$(date --iso=seconds)
      mv core $nn
      gdb -q -batch -ex backtrace viewer $nn 
      gzip $nn &
    fi
    exit $s
    """

    def __init__(self, *args, **kwargs):
        kwargs["command"] = ["bash", "-c", self.testscript]
        Test.__init__(self, *args, **kwargs)


    def evaluateCommand(self, cmd):
        rc = Test.evaluateCommand(self, cmd)
        test_stdio = self.getLog('stdio').getText()
        if 'test state: failure' in test_stdio.lower():
            return FAILURE
        else:
            return rc

            
f1 = factory.BuildFactory()
f1.addStep(Git(repourl="git://github.com/realXtend/naali.git", branch="develop"))
f1.addStep(ShellCommand(command=["bash", "-c", "rm -f CMakeBuildConfig.txt CMakeOptionalModules.txt bin/viewer bin/modules/core/*.{so,xml}"]))
f1.addStep(Compile(command=["bash", "tools/build-ubuntu-deps.bash"]))
#f1.addStep(Trial(testChanges=True, testpath="."))
#f1.addStep(NaaliTest())
b1 = {'name': "naali-ubuntu-incremental",
      'slavename': "ubuntu",
      'builddir': "inc1",
      'factory': f1,
      }

f2 = factory.BuildFactory()
f2.addStep(Git(repourl="git://github.com/realXtend/naali.git", branch="tundra"))
f2.addStep(ShellCommand(command=["bash", "-c", "rm -f CMakeBuildConfig.txt CMakeOptionalModules.txt bin/viewer bin/modules/core/*.{so,xml}"]))
f2.addStep(Compile(command=["bash", "tools/build-ubuntu-deps.bash"]))
#f2.addStep(Trial(testChanges=True, testpath="."))
f2.addStep(TundraTest())
#f2.addStep(NaaliTest())
b2 = {'name': "tundra-ubuntu-incremental",
      'slavename': "ubuntu",
      'builddir': "inc-tundra",
      'factory': f2,
      }

f3 = factory.BuildFactory()
f3.addStep(ShellCommand(command=["wget", "http://students.oamk.fi/~t8vaja02/BuildBot.tar.gz", "-O", "BuildBot.tar.gz"], workdir="build/"))
f3.addStep(ShellCommand(command=["tar", "-xvf", "BuildBot.tar.gz"], workdir="build/"))
#f3.addStep(ShellCommand(command=["./build.sh", "-b", "naali"], workdir="build/BuildBot"))
f3.addStep(ShellCommand(command=["./build.sh", "-b", "tundra"], workdir="build/BuildBot"))
f3.addStep(ShellCommand(command=["./build.sh", "-a", "i386", "-b" , "tundra"], workdir="build/BuildBot"))
#f3.addStep(ShellCommand(command=["./build.sh", "-a", "i386"], workdir="build/BuildBot"))

b3 = {'name': "tundra-deb",
      'slavename': "ubuntu-pkg",
      'builddir': "tundra-deb",
      'factory': f3,
      }


f4 = factory.BuildFactory()
f4.addStep(ShellCommand(command=["wget", "http://students.oamk.fi/~t8vaja02/BuildBot.tar.gz", "-O", "BuildBot.tar.gz"], workdir="build/"))
f4.addStep(ShellCommand(command=["tar", "-xvf", "BuildBot.tar.gz"], workdir="build/"))
f4.addStep(ShellCommand(command=["./build.sh", "-b", "naali"], workdir="build/BuildBot"))
f4.addStep(ShellCommand(command=["./build.sh", "-b", "naali", "-a", "i386"], workdir="build/BuildBot"))

b4 = {'name': "develop-deb",
      'slavename': "ubuntu-pkg",
      'builddir': "naali-deb",
      'factory': f4,
      }


c['builders'] = [b1, b2 , b3, b4]


####### STATUS TARGETS

# 'status' is a list of Status Targets. The results of each build will be
# pushed to these targets. buildbot/status/*.py has a variety to choose from,
# including web pages, email senders, and IRC bots.

c['status'] = []

# Use allowForce=True (boolean, not a string. ie: not 'True') to allow
# Forcing Builds in the Web User Interface. The default is False.
from buildbot.status import html
c['status'].append(html.WebStatus(http_port=8010,allowForce=True))

#from buildbot.status import html
#c['status'].append(html.WebStatus(http_port=8010))

# from buildbot.status import mail
# c['status'].append(mail.MailNotifier(fromaddr="buildbot@localhost",
#                                      extraRecipients=["builds@example.com"],
#                                      sendToInterestedUsers=False))
#
# from buildbot.status import words
# c['status'].append(words.IRC(host="irc.example.com", nick="bb",
#                              channels=["#example"]))
#
from buildbot.status import client
c['status'].append(client.PBListener(9988))

from buildbot.status import words
irc = words.IRC("irc.freenode.net", "rex-buildbot",
             channels=["#realxtend-dev"],
             notify_events={
                 'success': 1,
                 'failure': 1,
             })
c['status'].append(irc)

####### DEBUGGING OPTIONS

# if you set 'debugPassword', then you can connect to the buildmaster with
# the diagnostic tool in contrib/debugclient.py . From this tool, you can
# manually force builds and inject changes, which may be useful for testing
# your buildmaster without actually committing changes to your repository (or
# before you have a functioning 'sources' set up). The debug tool uses the
# same port number as the slaves do: 'slavePortnum'.

#c['debugPassword'] = "debugpassword"

# if you set 'manhole', you can ssh into the buildmaster and get an
# interactive python shell, which may be useful for debugging buildbot
# internals. It is probably only useful for buildbot developers. You can also
# use an authorized_keys file, or plain telnet.
#from buildbot import manhole
#c['manhole'] = manhole.PasswordManhole("tcp:9999:interface=127.0.0.1",
#                                       "admin", "password")


####### PROJECT IDENTITY

# the 'projectName' string will be used to describe the project that this
# buildbot is working on. For example, it is used as the title of the
# waterfall HTML page. The 'projectURL' string will be used to provide a link
# from buildbot HTML pages to your project's home page.

c['projectName'] = "RealXtend"
c['projectURL'] = "http://wiki.realxtend.org/"

# the 'buildbotURL' string should point to the location where the buildbot's
# internal web server (usually the html.Waterfall page) is visible. This
# typically uses the port number set in the Waterfall 'status' entry, but
# with an externally-visible host name which the buildbot cannot figure out
# without some help.

c['buildbotURL'] = "http://studio.playsign.fi:8010/"
