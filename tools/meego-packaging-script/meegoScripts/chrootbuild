#!/bin/bash

export PYTHON_PATH=/usr/bin/
export PYTHON_LIB=/usr/lib/python2.6/

rpmbuild=$HOME/rpmbuild
naalidir=$HOME/naali
doneflags=$rpmbuild/flags
packets=/packages/usr

pcount=`grep -c "^processor" /proc/cpuinfo`

mkdir -p $packets/lib $packets/include $packets/../rpms
mkdir -p $rpmbuild/SPECS $rpmbuild/SOURCES $doneflags
cp /meegoScripts/specs/* $rpmbuild/SPECS

# Add repo with newest stuff
#//zypper ar http://repo.meego.com/MeeGo/builds/trunk/latest/repos/oss/ia32/packages/ oss
#zypper update

# Install dependencies
#zypper remove emgd-bin pvr-bin pvr-bin-mdfld 
zypper -n remove mesa-libGLUT
zypper -n install boost boost-devel python-devel libicu xmlrpc-c-c++ xmlrpc-c-client++ xmlrpc-c-devel openjpeg openjpeg-devel freetype xorg-x11-proto-xproto xorg-x11-proto-kbproto libXau libXau-devel libpthread-stubs xorg-x11-filesystem xorg-x11-proto-randrproto xorg-x11-proto-renderproto rpm-build qt-qmake libxcb-devel libX11-devel libICE-devel libSM-devel libXt-devel libXmu-devel libXaw-devel libXrandr-devel libXrender-devel libphonon-devel zip libqt-devel zlib-devel SDL-devel xmlto  libqtwebkit-devel wget  git libvorbis-devel  freetype-devel expat-devel freeglut-devel libpng-devel mesa-libEGL mesa-libEGL-devel mesa-libGLESv2 mesa-libGLESv2-devel libqtopengl-devel mesa-libGLESv1 mesa-libGLESv1-devel libtool autoconf

cd $HOME
test -f mercurial-1.7.1-3.1.i586.rpm || wget http://repo.pub.meego.com/home:/arfoll:/utils/meego_1.1_core/i586/mercurial-1.7.1-3.1.i586.rpm
rpm -i mercurial-1.7.1-3.1.i586.rpm

# Building PythonQt (com_trolltech_qt_core0.h needs some editing)
url=http://downloads.sourceforge.net/project/pythonqt/pythonqt/PythonQt-2.0.1
package=PythonQt2.0.1
extension=zip

cd $rpmbuild/SOURCES

if test -f $doneflags/$package; then
		echo BUILDSCRIPT: $package already built
else
	test -f $package.$extension || wget $url/$package.$extension
	unzip $package.$extension
	#----editing the source-----
	cd $package/generated_cpp/com_trolltech_qt_core
	sed 's/CocoaRequestModal = QEvent::CocoaRequestModal,/ /g' com_trolltech_qt_core0.h > TEMPFILE && mv TEMPFILE com_trolltech_qt_core0.h
	cd ../../
	#----/editing the source----
	echo BUILDSCRIPT: Building package $package
	qmake
	make all -j $pcount
	rm $packets/lib/libPythonQt*
	cp -u lib/libPythonQt* $packets/lib
	cp -u src/PythonQt*.h $packets/include
	cp -u extensions/PythonQt_QtAll/PythonQt*.h $packets/include
	cp -u lib/libPythonQt* /usr/lib
	cp -u src/PythonQt*.h /usr/include
	cp -u extensions/PythonQt_QtAll/PythonQt*.h /usr/include
	touch $doneflags/$package
fi

# Building qtpropertybrowser
url=http://get.qt.nokia.com/qt/solutions/lgpl
package=qtpropertybrowser-2.5_1-opensource
extension=tar.gz

cd $rpmbuild/SOURCES

if test -f $doneflags/$package; then
		echo BUILDSCRIPT: $package already built
else
	test -f $package.$extension || wget $url/$package.$extension
	tar xzf $package.$extension
	cd $package
	echo BUILDSCRIPT: Building package $package
	touch .licenseAccepted
	./configure -library
	qmake
	make -j $pcount
	cp -u lib/lib* $packets/lib
	cp -u src/qt*.h src/Qt* $packets/include
	cp -u lib/lib* /usr/lib
	cp -u src/qt*.h src/Qt* /usr/include
	touch $doneflags/$package
fi

# Building knet
url=http://bitbucket.org/clb
package=knet

cd $rpmbuild/SOURCES

if test -f $doneflags/$package; then
		echo BUILDSCRIPT: $package already built
else
	rm -rf $package && hg clone -r stable $url/$package
	cd $package
	sed -e "s/USE_TINYXML TRUE/USE_TINYXML FALSE/" -e "s/kNet STATIC/kNet SHARED/" < CMakeLists.txt > x
	mv x CMakeLists.txt
	cmake .
	make -j $pcount
	cp -u lib/libkNet.so $packets/lib/
	cp -u lib/libkNet.so /usr/lib/
	rsync -r include/* /usr/include/
	rsync -r include/* $packets/include/
	touch $doneflags/$package
fi

# Building OpenAL
url=http://connect.creativelabs.com/openal/Downloads
package=openal-soft-1.13
extension=tbz2

cd $rpmbuild/SOURCES

if test -f $doneflags/$package; then
        echo BUILDSCRIPT: $package already built
else
    test -f $package.$extension || wget $url/$package.$extension
    tar xvfj $package.$extension
    cd $package/build
    echo BUILDSCRIPT: Building package $package
    cmake ..
    make -j $pcount
    make install
    cp -u libopenal.* $packets/lib
    cp -r ../include/AL $packets/include
    touch $doneflags/$package
fi

# Building Bullet
url=http://bullet.googlecode.com/files
package=bullet-2.77
extension=tgz

cd $rpmbuild/SOURCES

if test -f $doneflags/$package; then
        echo BUILDSCRIPT: $package already built
else
    test -f $package.$extension || wget $url/$package.$extension
    tar xzf $package.$extension
    cd $package
    echo BUILDSCRIPT: Building package $package
    cmake -DCMAKE_INSTALL_PREFIX=/usr -DBUILD_DEMOS=OFF -DINSTALL_EXTRA_LIBS=ON -DCMAKE_CXX_FLAGS_RELEASE="-O2 -fPIC -DNDEBUG -DBT_NO_PROFILE" .
    make -j $pcount
    make install
    touch $doneflags/$package
fi

mkdir -p /root/libs

cd $packets

if [ ! -d FreeImage ]
then
	wget http://downloads.sourceforge.net/project/freeimage/Source%20Distribution/3.14.1/FreeImage3141.zip
	unzip FreeImage3141.zip
	cd FreeImage/Source/OpenEXR/Imath
	sed "54a #include <string.h>" ImathMatrix.h >> TEMPFILE && mv TEMPFILE ImathMatrix.h
	cd ../../..
	make -j $pcount
	make install
	ln -s libfreeimage-3.14.1.so libFreeimage.so.3
	cd ..
fi

cp ./FreeImage/*image*so* /root/libs/

if [ ! -d poco-1.4.0 ]
then
	wget http://downloads.sourceforge.net/project/poco/sources/poco-1.4.0/poco-1.4.0.tar.gz
	tar -xvf poco-1.4.0.tar.gz
	cd poco-1.4.0
	./configure
	make -j $pcount
	make install
	cd ..
fi

cp ./poco-1.4.0/lib/Linux/x86_64/libPocoFoundation.so.10 /root/libs/
cp ./poco-1.4.0/lib/Linux/x86_64/libPocoFoundationd.so.10 /root/libs/
cp ./poco-1.4.0/lib/Linux/x86_64/libPocoNet.so.10 /root/libs/
cp ./poco-1.4.0/lib/Linux/x86_64/libPocoUtil.so.10 /root/libs/
cp ./poco-1.4.0/lib/Linux/x86_64/libPocoXML.so.10 /root/libs/

if [ ! -d zziplib-0.13.59 ]
then
	wget http://downloads.sourceforge.net/project/zziplib/zziplib13/0.13.59/zziplib-0.13.59.tar.bz2
	tar -xvf zziplib-0.13.59.tar.bz2
	cd zziplib-0.13.59
	./configure
	make -j $pcount
	make install
	cd ..
fi

cp ./zziplib-0.13.59/Linux_2.6.32-30-generic_x86_64.d/zzip/.libs/libzzip-0.so.13 /root/libs/

if [ ! -d xmlrpc ]
then
	wget http://downloads.sourceforge.net/project/xmlrpc-epi/xmlrpc-epi-base/0.54.1/xmlrpc-epi-0.54.1.tar.gz
	tar -xvf xmlrpc-epi-0.54.1.tar.gz
	cd xmlrpc
	./autogen.sh
	./configure
	make -j $pcount
	make install
	cd ..
fi


if [ ! -d ogre ]
then
	echo "Installing OGRE"
	hg clone http://bitbucket.org/sinbad/ogre/ -u v1-7
	#git clone git://github.com/aras-p/glsl-optimizer.git
	cd ogre
	cmake -DCMAKE_INSTALL_PREFIX=/usr -DOGRE_BUILD_RENDERSYSTEM_GLES=1 
	#-DOGRE_BUILD_RENDERSYSTEM_GLES2=1 -DOGRE_BUILD_SAMPLES=0 -DCMAKE_CXX_FLAGS:STRING=-I$packets/glsl-optimizer/src/glsl/ .
	make -j $pcount
	make install DESTDIR=./
	make install
	cd ..
else
	echo "Ogre already installed"
fi

cp -fr /packages/usr/ogre/lib/* /root/libs

# Building tundra
echo BUILDSCRIPT: Building tundra
cd $naalidir
NAALI_DEP_PATH=/usr/ cmake "-DCMAKE_CXX_FLAGS:STRING=-DKNET_USE_BOOST  -lboost_filesystem -I/usr/include/bullet" .
make -j $pcount

sed '/PluginFolder/c \PluginFolder=./lib' $naalidir/bin/plugins-unix.cfg > tmpfile ; mv tmpfile /$naalidir/bin/plugins-unix.cfg

cat > $naalidir/bin/run-viewer.sh << EOF
#!/bin/bash
cd /opt/realXtend
export LD_LIBRARY_PATH=.:./modules/core:./lib
./viewer "$@"
EOF

cat > $naalidir/bin/run-server.sh << EOF
#!/bin/bash
cd /opt/realXtend
export LD_LIBRARY_PATH=.:./modules/core:./lib
./server "$@"
EOF

cd $naalidir/bin/
#strip * */**

rpmbuild -bb -vv --target i586 /root/rpmbuild/SPECS/tundra-meego-scenes-0.0-1.spec
rpmbuild -bb -vv --target i586 /root/rpmbuild/SPECS/tundra-meego-0.0-1.spec
cp /root/rpmbuild/RPMS/i586/Tundra-Meego-0.0-1.i586.rpm /packages/rpms/
cp /root/rpmbuild/RPMS/i586/Tundra-Meego-Scenes-0.0-1.i586.rpm /packages/rpms/

