/**

\page TundraArchitectureOverview Naali and Tundra Architecture Overview

Tundra offers a diverse amount of functionality. To be able to maintain all the features, the different functionality is implemented as separate modules. Conceptually, these modules are grouped into larger subsystems based on the roles different modules have. A description of each subsystem is available on \ref TundraSubsystems "the main page".

The modules are implemented on top of a common \ref CoreAPIList "Core API". This API is exposed to all C++ code running on top of Tundra, as well as to the supported scripting languages via the Qt meta-object system. The structuring of Tundra follows a traditional "framework" approach. 

Additionally, functionality is implemented as separate Entity-Component libraries. The \ref component_base "Tundra Entity Component Reference" page describes in detail all the provided components.  

As time has passed, Naali/Tundra has gained the ability to talk to two different server backends. The Taiga server is the older platform, and is based on the OpenSim server codebase. The newer Tundra server is implemented in terms of the Naali Core API itself, using the same mechanisms the Naali viewer is implemented with. Therefore, you can sometimes read people writing "Naali is Tundra", as it is in fact the same code running on both.
   
Naali uses CMake as its build system. The different parts of the repository are grouped into separate projects, which each reside in their individual folders.

This page provides an overview of the internal structure of different folders in the codebase.

\image html NaaliStructure.png

The Taiga and Tundra servers are not identical in features, and therefore the set of available features differ based on which server you are connected to. The above diagram shows all the Naali modules placed in different categories. At the bottom level, certain modules are required for Naali to build. The core API and these modules make up the core components of Naali.

To illustrate the difference between the two server backends, the available modules are grouped into Tundra- and Taiga -specific modules. The Tundra-specific modules are used by the Tundra server when it's running, but also by Naali when it is acting as a Tundra client. Appropriately, the Taiga modules are then useful only if Naali is connected to a Taiga server.

The Naali scene is a data structure that is generic from the actual server representation of the world. Naali tries to generate a similar scene structure regardless of whether it is connected to a Taiga server or to a Tundra server, although there are differences. In any case, certain modules are abstract enough that they can function independent of which server Naali is connected to. These modules are shown in the diagram in green. 
  
Finally, two different UI implementations are provided. The UiModule provides a fully implemented UI for end-users. This is enabled by default on the Naali installers if you download one. Alternatively, for application developers, there exists a lighter combination of UiServiceModule and LoginScreenModule, which show how to implement a completely customized UI to Naali.

\section Naali3rdPartyDeps Third-Party Dependencies

Like any healthy open-source project, Naali has also accumulated a large set of third-party dependencies to enable different features. The following diagram shows an up-to-date chart of the current ones.

\image html NaaliDependencies.png

The Naali dependencies SVN repository contains a bundle of the proper versions of all of these dependencies on Windows, so that developers do not have to build      
each of them manually.

To combat against a growing set of dependencies, several Naali modules are implemented as optional modules. This allows developers to disable certain modules if they come with a particularly problematic set of dependencies, which in part allows building a slimmer binary of Naali. For more information about configuring the Naali build, see \ref RunningNaali "Configuring and Running Naali".   

*/