/**

\page RunningTundra Configuring and Running Tundra

The application-level functionality in Tundra is implemented in different ways. 

Some features are implemented as Tundra Modules, which are shared libraries (.dll or .so) that are loaded on startup. This architecture forms a plugin base for Tundra.

The modules can define custom Entity Components (ECs), which allow data and code to be embedded into individual objects in the scene. Modules and ECs differ in the following ways:
- ECs are always attached to a certain entity in the scene, so there can be multiple instances of them, whereas there is always only one instance of a module running at once.
- Modules start running the moment Tundra starts up. ECs on the other hand cannot exist until a scene is populated with content.

Modules are written in C++. ECs can be written by using C++ or by using a scripting language (via the EC_Script component).

Third, application developers can use QtScript to create "application-level scripts", which operate much like native C++ modules. They are executed when the application starts up, and they have full access to the Tundra Core API just like the C++ modules do. The startup scripts reside in the folder /bin/jsmodules/startup.   

\section ModuleConfig Configuring which modules to build and load. 

Most of the behavior of Tundra is configured at compile-time via the CMakeModuleConfig.txt file. This file lists all the modules that can be included as part of the build, and you can choose the set of modules to build by commenting or uncommenting the ones you are interested in. The same file also determines which Entity-Components classes to include to the build.

The compiled modules are stored in the directory /bin/modules/core. Each of these modules is accompanied by an .xml file with the same basename than the module. These xml files describe the dependencies each module may have to other modules. Prior to starting up Tundra, you can configure the set of modules to run by including or excluding (adding or deleting) the shared libraries from this folder.

\section TundraCommandLineOptions Command line options

The startup behavior of Tundra can be configured with the following command-line options:

<table>
<tr><td style="width: 200px;">--headless</td><td>Starts the application in headless mode. In this mode, main window is not created and asset resources are not uploaded to the GPU for rendering. This is useful when running the Tundra server in dedicated mode.</td></tr>
<tr><td>--help</td><td>Shows the command line help.</td></tr>
<tr><td>--run <i>scriptFile.js</i></td><td>Specifies a QtScript file to execute immediately after Tundra has started up.</td></tr>
<tr><td>--python <i>scriptFile.py</i></td><td>Specifies a Python file to execute immediately after Tundra has started up.</td></tr>
<tr><td>--file <i>sceneFile.txml</i></td><td>Specifies a Tundra scene file to load into the viewer or server immediately after Tundra has started up. You can either specify a .txml file or a .tbin file to load up. The directory this scene file resides is recursively added as a local asset storage folder. You can use the local:// and http:// URL protocol specifier to refer to assets inside this folder, in this case the file is loaded from via the AssetAPI./td></tr>
<tr><td>--storage <i>storageDirectory</i></td><td>Adds the given directory recursively as a local asset storage folder. You can use the local:// URL protocol specifier to refer to assets inside this folder.</td></tr>
<tr><td>--fpslimit <i>x</i></td><td>Limits the maximum FPS the main loop is run at to the given value. This is useful not only for rendering, but also for the headless mode server, to limit it from consuming 100% of the CPU. The FPS limiter is on by default (both client and server) and set to 60 fps. To disable the FPS limiter, run Tundra with '--fpslimit 0'.</td></tr>
<tr><td>--protocol <i>protocol</i></td><td>Specifies which transport layer to use. Used when starting a server and when client connects. Options: '--protocol tcp' and '--protocol udp'. Defaults to tcp if no protocol is specified.</td></tr>
<tr><td>--login <i>logindata</i></td><td>Automatically login to server using provided data. Url syntax: {tundra|http|https}://host[:port]/?username=x[&password=y&avatarurl=z&protocol={udp|tcp}]. Minimum information needed to try a connection in the url are host and username. Url examples: <i>tundra://server.com/?username=John tundra://server.com:5432/?username=John&password=pWd123&protocol=udp</i></td></tr>
</table>  

*/